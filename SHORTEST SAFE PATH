//SHORTEST SAFE PATH
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define M 10
#define N 10
struct Node
{
    int x, y, dist;
};
int row[] = { -1, 0, 0, 1 };
int col[] = { 0, -1, 1, 0 };
 
bool isSafe(int field[M][N], bool visited[M][N], int x, int y)
{
    if (field[x][y] == 0 || visited[x][y]) {
        return false;
    }
 
    return true;
}
bool isValid(int x, int y)
{
    if (x < M && y < N && x >= 0 && y >= 0) {
        return true;
    }
 
    return false;
}
 int BFS(int field[M][N])
{
    bool visited[M][N];
    memset(visited, false, sizeof(visited));
 
   queue<Node> q;
    for (int r = 0; r < M; r++)
    {
        if (field[r][0] == 1)
        {
            q.push({r, 0, 0});
            visited[r][0] = true;
        }
    }
    while (!q.empty())
    {
        int i = q.front().x;
        int j = q.front().y;
        int dist = q.front().dist;
        q.pop();
        if (j == N - 1) {
            return dist;
        }
        for (int k = 0; k < 4; k++)
        {
            if (isValid(i + row[k], j + col[k]) &&
                isSafe(field, visited, i + row[k], j + col[k]))
            {
                visited[i + row[k]][j + col[k]] = true;
                q.push({i + row[k], j + col[k], dist + 1});
            }
        }
    }
    return INT_MAX;
}
 int findShortestDistance(int field[M][N])
{
    int r[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
    int c[] = { -1, 0, 1, -1, 1, -1, 0, 1 };
 
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            for (int k = 0; k < 8; k++) {
                if (!field[i][j] && isValid(i + r[k], j + c[k])
                        && field[i + r[k]][j + c[k]]) {
                    field[i + r[k]][j + c[k]] = INT_MAX;
                }
            }
        }
    }
 
  
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (field[i][j] == INT_MAX) {
                field[i][j] = 0;
            }
        }
    }
 
    return BFS(field);
}
 
int main()
{
    int field[M][N] =
    {
        { 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
        { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
    };
 
    int dist = findShortestDistance(field);
 
    if (dist != INT_MAX) {
        cout << "The shortest safe path has a length of " << dist;
    }
    else {
        cout << "No route is safe to reach destination";
    }
 
    return 0;
}
